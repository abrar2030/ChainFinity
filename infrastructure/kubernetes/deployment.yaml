---
# ChainFinity Kubernetes Deployment
# Financial Grade Security and Compliance Configuration

# Namespace for ChainFinity Application
apiVersion: v1
kind: Namespace
metadata:
  name: chainfinity
  labels:
    name: chainfinity
    security.compliance/level: "high"
    security.compliance/pci-dss: "required"
    security.compliance/sox: "required"
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: "kubernetes"
  annotations:
    security.compliance/audit: "enabled"
    security.compliance/encryption: "required"
    network.policy/isolation: "strict"
    scheduler.alpha.kubernetes.io/node-selector: "chainfinity.com/workload=application"

---
# Service Account for ChainFinity Application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chainfinity-app
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: application
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/chainfinity-app-role"
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "chainfinity-app"
    vault.hashicorp.com/agent-inject-secret-config: "secret/data/app/chainfinity"
    vault.hashicorp.com/agent-inject-template-config: |
      {{- with secret "secret/data/app/chainfinity" -}}
      export DB_HOST="{{ .Data.data.db_host }}"
      export DB_PASSWORD="{{ .Data.data.db_password }}"
      export JWT_SECRET="{{ .Data.data.jwt_secret }}"
      export API_KEY="{{ .Data.data.api_key }}"
      {{- end -}}
automountServiceAccountToken: true

---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: chainfinity-config
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: configuration
data:
  # Application configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "8080"
  METRICS_PORT: "9090"
  
  # Security configuration
  ENABLE_HTTPS: "true"
  ENABLE_CORS: "false"
  ENABLE_HELMET: "true"
  ENABLE_RATE_LIMITING: "true"
  
  # Database configuration
  DB_SSL_MODE: "require"
  DB_CONNECTION_TIMEOUT: "30000"
  DB_POOL_SIZE: "10"
  
  # Monitoring configuration
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  ENABLE_HEALTH_CHECKS: "true"
  
  # Compliance configuration
  ENABLE_AUDIT_LOGGING: "true"
  ENABLE_DATA_ENCRYPTION: "true"
  ENABLE_PII_PROTECTION: "true"

---
# Secret for TLS Certificates (managed by cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: chainfinity-tls-secret
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
# Data will be populated by cert-manager

---
# Frontend Deployment with Enhanced Security
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chainfinity-frontend
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: frontend
    app.kubernetes.io/version: "1.0.0"
    security.compliance/level: "high"
  annotations:
    deployment.kubernetes.io/revision: "1"
    security.compliance/scan-required: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: chainfinity-frontend
      app.kubernetes.io/name: chainfinity
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app: chainfinity-frontend
        app.kubernetes.io/name: chainfinity
        app.kubernetes.io/component: frontend
        app.kubernetes.io/version: "1.0.0"
        security.compliance/level: "high"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "chainfinity-frontend"
    spec:
      serviceAccountName: chainfinity-app
      automountServiceAccountToken: true
      
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1000]
      
      # Node Selection and Affinity
      nodeSelector:
        chainfinity.com/workload: "application"
        kubernetes.io/arch: "amd64"
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - chainfinity-frontend
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: chainfinity.com/workload
                operator: In
                values:
                - application
      
      tolerations:
      - key: "chainfinity.com/dedicated"
        operator: "Equal"
        value: "application"
        effect: "NoSchedule"
      
      # Init Containers for Security Checks
      initContainers:
      - name: security-init
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Running security initialization..."
          # Check file permissions
          ls -la /app
          # Verify no sensitive files
          find /app -name "*.key" -o -name "*.pem" -o -name "*secret*" | wc -l
          echo "Security initialization completed"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: app-volume
          mountPath: /app
          readOnly: true
        resources:
          requests:
            cpu: "10m"
            memory: "16Mi"
          limits:
            cpu: "50m"
            memory: "64Mi"
      
      containers:
      - name: frontend
        image: chainfinity/frontend:1.0.0
        imagePullPolicy: Always
        
        # Security Context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        # Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment Variables
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: chainfinity-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: chainfinity-config
              key: PORT
        - name: REACT_APP_API_URL
          value: "https://api.chainfinity.com"
        - name: REACT_APP_VERSION
          value: "1.0.0"
        - name: REACT_APP_ENVIRONMENT
          value: "production"
        
        # Resource Management
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "500m"
            memory: "512Mi"
            ephemeral-storage: "2Gi"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Volume Mounts
        volumeMounts:
        - name: app-volume
          mountPath: /app
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
      
      # Sidecar Container for Log Shipping
      - name: log-shipper
        image: fluent/fluent-bit:2.1.10
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
          readOnly: true
      
      # Volumes
      volumes:
      - name: app-volume
        emptyDir:
          sizeLimit: "1Gi"
      - name: tmp-volume
        emptyDir:
          sizeLimit: "500Mi"
      - name: cache-volume
        emptyDir:
          sizeLimit: "1Gi"
      - name: logs-volume
        emptyDir:
          sizeLimit: "2Gi"
      - name: tls-certs
        secret:
          secretName: chainfinity-tls-secret
          defaultMode: 0400
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 30
      
      # Image Pull Secrets
      imagePullSecrets:
      - name: chainfinity-registry-secret

---
# Backend Deployment with Enhanced Security
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chainfinity-backend
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "1.0.0"
    security.compliance/level: "high"
  annotations:
    deployment.kubernetes.io/revision: "1"
    security.compliance/scan-required: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: chainfinity-backend
      app.kubernetes.io/name: chainfinity
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app: chainfinity-backend
        app.kubernetes.io/name: chainfinity
        app.kubernetes.io/component: backend
        app.kubernetes.io/version: "1.0.0"
        security.compliance/level: "high"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "chainfinity-backend"
        vault.hashicorp.com/agent-inject-secret-db: "secret/data/database/chainfinity"
        vault.hashicorp.com/agent-inject-template-db: |
          {{- with secret "secret/data/database/chainfinity" -}}
          export DATABASE_URL="postgresql://{{ .Data.data.username }}:{{ .Data.data.password }}@{{ .Data.data.host }}:{{ .Data.data.port }}/{{ .Data.data.database }}?sslmode=require"
          {{- end -}}
    spec:
      serviceAccountName: chainfinity-app
      automountServiceAccountToken: true
      
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1001]
      
      # Node Selection and Affinity
      nodeSelector:
        chainfinity.com/workload: "application"
        kubernetes.io/arch: "amd64"
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - chainfinity-backend
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: chainfinity.com/workload
                operator: In
                values:
                - application
      
      tolerations:
      - key: "chainfinity.com/dedicated"
        operator: "Equal"
        value: "application"
        effect: "NoSchedule"
      
      # Init Containers
      initContainers:
      - name: database-migration
        image: chainfinity/backend:1.0.0
        command: ['python', 'manage.py', 'migrate']
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: chainfinity-db-secret
              key: database-url
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
      
      containers:
      - name: backend
        image: chainfinity/backend:1.0.0
        imagePullPolicy: Always
        
        # Security Context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        # Ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment Variables
        envFrom:
        - configMapRef:
            name: chainfinity-config
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: chainfinity-db-secret
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: chainfinity-redis-secret
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: chainfinity-app-secret
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: chainfinity-app-secret
              key: encryption-key
        
        # Resource Management
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
            ephemeral-storage: "2Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
            ephemeral-storage: "4Gi"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Volume Mounts
        volumeMounts:
        - name: app-volume
          mountPath: /app
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        - name: uploads-volume
          mountPath: /app/uploads
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
      
      # Sidecar Container for Log Shipping
      - name: log-shipper
        image: fluent/fluent-bit:2.1.10
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
          readOnly: true
      
      # Volumes
      volumes:
      - name: app-volume
        emptyDir:
          sizeLimit: "2Gi"
      - name: tmp-volume
        emptyDir:
          sizeLimit: "1Gi"
      - name: cache-volume
        emptyDir:
          sizeLimit: "2Gi"
      - name: logs-volume
        emptyDir:
          sizeLimit: "4Gi"
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: chainfinity-uploads-pvc
      - name: tls-certs
        secret:
          secretName: chainfinity-tls-secret
          defaultMode: 0400
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 60
      
      # Image Pull Secrets
      imagePullSecrets:
      - name: chainfinity-registry-secret


---
# Persistent Volume Claim for Uploads
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: chainfinity-uploads-pvc
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: storage
  annotations:
    volume.beta.kubernetes.io/storage-class: "gp3-encrypted"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp3-encrypted

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: chainfinity-frontend
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:ACCOUNT_ID:certificate/CERTIFICATE_ID"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: chainfinity-frontend
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: frontend
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  sessionAffinity: None

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: chainfinity-backend
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: chainfinity-backend
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  sessionAffinity: None

---
# Headless Service for Backend (for StatefulSet if needed)
apiVersion: v1
kind: Service
metadata:
  name: chainfinity-backend-headless
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: chainfinity-backend
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP

---
# Ingress with Enhanced Security
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chainfinity-ingress
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: ingress
  annotations:
    # Ingress Controller Configuration
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "chainfinity-ca-issuer"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Request Size Limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/client-max-body-size: "10m"
    
    # Timeout Configuration
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Backend Configuration
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "10"
    nginx.ingress.kubernetes.io/upstream-keepalive-requests: "100"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "60"
    
    # Logging
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/access-log-path: "/var/log/nginx/chainfinity-access.log"
    
    # WAF Integration
    nginx.ingress.kubernetes.io/modsecurity-transaction-id: "$request_id"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecResponseBodyAccess On
      SecAuditEngine RelevantOnly
      SecAuditLog /var/log/nginx/modsec_audit.log
      
spec:
  tls:
  - hosts:
    - chainfinity.com
    - www.chainfinity.com
    - api.chainfinity.com
    secretName: chainfinity-tls-secret
  rules:
  - host: chainfinity.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: chainfinity-frontend
            port:
              number: 80
  - host: www.chainfinity.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: chainfinity-frontend
            port:
              number: 80
  - host: api.chainfinity.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: chainfinity-backend
            port:
              number: 8080

---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: chainfinity-frontend-hpa
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: chainfinity-frontend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: chainfinity-backend-hpa
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: chainfinity-backend
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chainfinity-frontend-pdb
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: frontend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: chainfinity-frontend
      app.kubernetes.io/name: chainfinity
      app.kubernetes.io/component: frontend

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: chainfinity-backend-pdb
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: chainfinity-backend
      app.kubernetes.io/name: chainfinity
      app.kubernetes.io/component: backend

---
# ConfigMap for Fluent Bit Log Shipping
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/component: logging
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Health_Check  On

    [INPUT]
        Name              tail
        Path              /app/logs/*.log
        Parser            json
        Tag               chainfinity.*
        Refresh_Interval  5
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Skip_Empty_Lines  On

    [FILTER]
        Name                kubernetes
        Match               chainfinity.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     chainfinity.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On

    [FILTER]
        Name    grep
        Match   chainfinity.*
        Exclude log level=debug

    [OUTPUT]
        Name                cloudwatch_logs
        Match               chainfinity.*
        region              us-west-2
        log_group_name      /aws/eks/chainfinity/application
        log_stream_prefix   ${HOSTNAME}-
        auto_create_group   On
        log_retention_days  2555

  parsers.conf: |
    [PARSER]
        Name        json
        Format      json
        Time_Key    timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

    [PARSER]
        Name        nginx
        Format      regex
        Regex       ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
        Time_Key    time
        Time_Format %d/%b/%Y:%H:%M:%S %z

---
# Storage Class for Encrypted Volumes
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp3-encrypted
  labels:
    app.kubernetes.io/name: chainfinity
    app.kubernetes.io/component: storage
  annotations:
    storageclass.kubernetes.io/is-default-class: "false"
provisioner: ebs.csi.aws.com
parameters:
  type: gp3
  encrypted: "true"
  kmsKeyId: "arn:aws:kms:us-west-2:ACCOUNT_ID:key/KEY_ID"
  iops: "3000"
  throughput: "125"
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Retain

---
# Priority Class for Critical Workloads
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: chainfinity-critical
  labels:
    app.kubernetes.io/name: chainfinity
value: 1000000
globalDefault: false
description: "Priority class for ChainFinity critical workloads"

---
# Resource Quota for Namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: chainfinity-quota
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
spec:
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    requests.storage: 1Ti
    limits.cpu: "50"
    limits.memory: 100Gi
    persistentvolumeclaims: "10"
    pods: "100"
    services: "20"
    secrets: "50"
    configmaps: "50"
    count/deployments.apps: "20"
    count/jobs.batch: "50"
    count/cronjobs.batch: "10"

---
# Limit Range for Namespace
apiVersion: v1
kind: LimitRange
metadata:
  name: chainfinity-limits
  namespace: chainfinity
  labels:
    app.kubernetes.io/name: chainfinity
spec:
  limits:
  - type: Container
    default:
      cpu: "500m"
      memory: "512Mi"
      ephemeral-storage: "2Gi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
      ephemeral-storage: "1Gi"
    max:
      cpu: "4"
      memory: "8Gi"
      ephemeral-storage: "10Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
      ephemeral-storage: "500Mi"
  - type: Pod
    max:
      cpu: "8"
      memory: "16Gi"
      ephemeral-storage: "20Gi"
  - type: PersistentVolumeClaim
    max:
      storage: "1Ti"
    min:
      storage: "1Gi"

