name: ChainFinity CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [blockchain, backend, frontend, mobile-frontend]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: matrix.component == 'blockchain' || matrix.component == 'frontend' || matrix.component == 'mobile-frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: code/${{ matrix.component }}/package-lock.json
      
      - name: Set up Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: code/backend/requirements.txt
      
      - name: Install dependencies (Node.js)
        if: matrix.component == 'blockchain' || matrix.component == 'frontend' || matrix.component == 'mobile-frontend'
        run: |
          cd code/${{ matrix.component }}
          npm ci
      
      - name: Install dependencies (Python)
        if: matrix.component == 'backend'
        run: |
          cd code/backend
          pip install -r requirements.txt
          pip install flake8 black mypy
      
      - name: Run linting (Node.js)
        if: matrix.component == 'blockchain' || matrix.component == 'frontend' || matrix.component == 'mobile-frontend'
        run: |
          cd code/${{ matrix.component }}
          npm run lint
      
      - name: Run linting (Python)
        if: matrix.component == 'backend'
        run: |
          cd code/backend
          flake8 .
          black --check .
          mypy .

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [blockchain, backend, frontend]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: matrix.component == 'blockchain' || matrix.component == 'frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: code/${{ matrix.component }}/package-lock.json
      
      - name: Set up Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: code/backend/requirements.txt
      
      - name: Install dependencies (Node.js)
        if: matrix.component == 'blockchain' || matrix.component == 'frontend'
        run: |
          cd code/${{ matrix.component }}
          npm ci
      
      - name: Install dependencies (Python)
        if: matrix.component == 'backend'
        run: |
          cd code/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests (Node.js)
        if: matrix.component == 'blockchain' || matrix.component == 'frontend'
        run: |
          cd code/${{ matrix.component }}
          npm test
      
      - name: Run tests (Python)
        if: matrix.component == 'backend'
        run: |
          cd code/backend
          pytest --cov=. --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./code/${{ matrix.component }}
          fail_ci_if_error: false
          verbose: true

  security-scan:
    name: Security Scan
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Run MythX for smart contract security
        run: |
          cd code/blockchain
          npm install -g @truffle/plugin-verify @mythx/cli
          mythx analyze

  build:
    name: Build
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [blockchain, backend, frontend, mobile-frontend]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: matrix.component == 'blockchain' || matrix.component == 'frontend' || matrix.component == 'mobile-frontend'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: code/${{ matrix.component }}/package-lock.json
      
      - name: Set up Python
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: code/backend/requirements.txt
      
      - name: Install dependencies (Node.js)
        if: matrix.component == 'blockchain' || matrix.component == 'frontend' || matrix.component == 'mobile-frontend'
        run: |
          cd code/${{ matrix.component }}
          npm ci
      
      - name: Install dependencies (Python)
        if: matrix.component == 'backend'
        run: |
          cd code/backend
          pip install -r requirements.txt
      
      - name: Build (Node.js)
        if: matrix.component == 'blockchain' || matrix.component == 'frontend' || matrix.component == 'mobile-frontend'
        run: |
          cd code/${{ matrix.component }}
          npm run build
      
      - name: Build (Python)
        if: matrix.component == 'backend'
        run: |
          cd code/backend
          pip install build
          python -m build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-build
          path: |
            code/${{ matrix.component }}/dist
            code/${{ matrix.component }}/build

  deploy:
    name: Deploy
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to AWS
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}"
          echo "Deploying to $ENVIRONMENT environment"
          
          # Deploy backend
          aws s3 sync artifacts/backend-build/ s3://chainfinity-$ENVIRONMENT-backend/
          
          # Deploy frontend
          aws s3 sync artifacts/frontend-build/ s3://chainfinity-$ENVIRONMENT-frontend/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          
          # Deploy blockchain contracts if needed
          if [ "$ENVIRONMENT" = "production" ]; then
            cd code/blockchain
            npm ci
            npx hardhat run scripts/deploy.js --network mainnet
          elif [ "$ENVIRONMENT" = "staging" ]; then
            cd code/blockchain
            npm ci
            npx hardhat run scripts/deploy.js --network testnet
          fi
      
      - name: Notify deployment status
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Deployment to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }} completed successfully!"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
